"Name"     = 'Regular expressions for bsn.Parser'
"Author"   = 'Arsène von Wyss'
"Version"  = '0'
"About"    = 'Regex parsing for bsn.Parser'

"Start Symbol" = <RegexExpression>
"Case Sensitive" = true

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{High Surrogate}    = {&D800 .. &DB7F}
{Low Surrogate}     = {&DC00 .. &DFFF}
{WS}                = {Whitespace} - {CR} - {LF}
{Regex Printable}   = {All Printable} - {Whitespace} - {CR} - {LF} - {HT} - {VT} - {Low Surrogate} - {High Surrogate}
{Regex Char}        = {Regex Printable} - [|/\{}()'['']'.+?*] - {Combining Diacritical Marks}
{Regex Charset}     = {Regex Printable} - [\']']
{Escape Printable}  = {Regex Printable} - [Ppxu]
{Charset Printable} = {All Letters} + {Number} + {WS} + [-_&]
{Hex Char}          = [0123456789AaBbCcDdEeFf]

! -------------------------------------------------
! Terminals
! -------------------------------------------------

! The following defines the Whitespace terminal using the {WS}
! set - which excludes the carriage return and line feed 
! characters

Whitespace       = {WS}+
Charset          = '{' {All Letters}{Charset Printable}* '}'
RegexLetter      = ({Regex Char} | {High Surrogate}{Low Surrogate}){Combining Diacritical Marks}*
RegexEscape      = '\' ([x] {Hex Char}{Hex Char} | [u] {Hex Char}{Hex Char}{Hex Char}{Hex Char} | [U] {Hex Char}{Hex Char}{Hex Char}{Hex Char}{Hex Char}{Hex Char}{Hex Char}{Hex Char} | [Pp] ({Letter} | '{' {All Letters}{Charset Printable}* '}') | {Escape Printable})
RegexCharset     = '[' '^'? ({Regex Charset} | {High Surrogate}{Low Surrogate} | '\' ([x] {Hex Char}{Hex Char} | [u] {Hex Char}{Hex Char}{Hex Char}{Hex Char} | [U] {Hex Char}{Hex Char}{Hex Char}{Hex Char}{Hex Char}{Hex Char}{Hex Char}{Hex Char} | [Pp] ({Letter} | '{' {All Letters}{Charset Printable}* '}') | {Escape Printable} | {High Surrogate}{Low Surrogate}))+ ']'
RegexKleene      = '*'
RegexRepeat      = '{' {Number}+ (',' {Number}*)? '}'
RegexAny         = '+'
RegexOptional    = '?'
SensitiveGroup   = '(?-i:'
InsensitiveGroup = '(?i:'

! -------------------------------------------------
! Rules
! -------------------------------------------------

<RegexExpression> ::= <RegexConcatenation> '|' <RegexExpression>
                   |  <RegexConcatenation>

<RegexConcatenation> ::= <RegexQuantified> <RegexConcatenation>
                      |  <RegexQuantified>
                   
<RegexGroup> ::= '(' <RegexExpression> ')'
              |  SensitiveGroup <RegexExpression> ')'
              |  InsensitiveGroup <RegexExpression> ')'
         
<RegexQuantified> ::= RegexLetter <RegexQuantifier>
                   |  RegexLetter
                   |  RegexEscape <RegexQuantifier>
                   |  RegexEscape
                   |  RegexCharset <RegexQuantifier>
                   |  RegexCharset
                   |  Charset <RegexQuantifier>
                   |  Charset
                   |  <RegexGroup> <RegexQuantifier>
                   |  <RegexGroup>
             
<RegexQuantifier> ::= RegexKleene
                   |  RegexAny
                   |  RegexOptional
                   |  RegexRepeat
